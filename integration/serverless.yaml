service: abc-company-integration

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  timeout: 60
  versionFunctions: false
  role: !GetAtt LambdaRole.Arn

functions:
  main:
    memorySize: 256
    handler: scheduler.handler
    name: ${self:service}-schedule-producer
    description: "Event Bridge trigger"
    environment:
      QueueUrl: !Ref SagaQueue
    events:
      - schedule: cron(0 0 ? * MON-FRI *) # At 00:00 on every day-of-week from Monday through Friday

  SQSTrigger:
    handler: api.handler
    name: ${self:service}-sqs-trigger
    description: "SQS trigger"
    timeout: 900
    memorySize: 1024
    environment:
      SupplierURL: "https://..."
      PaymentURL: "https://..."
      TableName: ${self:service}-storage
    events:
      - sqs:
          batchSize: 1
          arn: !GetAtt SagaQueue.Arn

  DynamoStreamsTrigger:
    handler: dynamo.handler
    name: ${self:service}-dynamo-trigger
    description: "Dynamo Streams trigger"
    timeout: 900
    memorySize: 1024
    environment:
      QueueUrl: !Ref SagaQueue
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          enabled: true
          arn: !GetAtt DynamoDbTable.StreamArn

resources:
  Resources:
    # REF: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
    SagaQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-saga-queue
        MessageRetentionPeriod: 14400 # 4 Hours
        VisibilityTimeout: 900 # 15 Minutes
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
          maxReceiveCount: 3 # When the ReceiveCount for a message exceeds the maxReceiveCount for a queue,
                             # Amazon SQS moves the message to a dead-letter queue

    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dead-letter-queue
        MessageRetentionPeriod: 345600 # 4 Days

    # REF: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-alarm-topic
        Subscription:
          -
            Endpoint: "erginakin@gmail.com"
            Protocol: "email"

    DeadLetterArrivalAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName : ${self:service}-dead-letter-arrival-alarm
        AlarmDescription: "Alarm if a message arrives at dead letter queue"
        Namespace: "AWS/SQS"
        MetricName: "NumberOfMessagesReceived"
        Dimensions:
          -
            Name: "QueueName"
            Value: !GetAtt SagaQueue.QueueName
        Statistic: "Sum"
        Period: "300"
        EvaluationPeriods: "1"
        Threshold: "1"
        ComparisonOperator: "GreaterThanThreshold"
        AlarmActions:
          -
            Ref: "AlarmTopic"
        InsufficientDataActions:
          -
            Ref: "AlarmTopic"

    # Creates a role that allows Lambda to reach AWS resources
    LambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:service}-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "abcLambdaPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - lambda:CreateEventSourceMapping
                    - lambda:ListEventSourceMappings
                    - lambda:ListFunctions
                  Resource: "*"
                - Effect: "Allow"
                  Action: "logs:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action: "sqs:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action: "dynamodb:*"
                  Resource: "*"
                - Effect: Allow
                  Resource: "*"
                  Action: "sts:AssumeRole"

    # REF: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    DynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-storage
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK # Partition Key
            KeyType: HASH
          - AttributeName: SK # Sort Key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
